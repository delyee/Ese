<?php
/**
* ZyX SimpleForm2
*
* @package ZyX SimpleForm2 1.0.5
* @copyright (C) 2010 ZyX allForJoomla.ru
* @url http://www.allForJoomla.ru/
* @authors ZyX <info@litecms.ru>
**/
defined('_VALID_MOS') or die(':)');

class simpleForm2 extends JObject{
	var $code = '';
	var $elements = array();
	var $attachments = array();
	var $id = null;
	var $_key = '';
	var $hasCaptcha = false;
	var $hasSubmit = false;
	var $side = 'backend';
	var $moduleID = null;
	var $template = 'default';
	var $defaultError = '%s';
	
	function simpleForm2($simpleCode,$isBackend=false){
		if($simpleCode=='') return false;
		if(!$isBackend) $this->side = 'frontend';
		$result = $this->parse($simpleCode);
		return $result;
	}
	
	function parse($code){
		$this->code = $code;
		$paramNames = array('regex','label','error','onclick','onchange','value','type','class','required','multiple','width','height','extensions','maxsize','color','background');
		$optionParamNames = array('label','value','selected','onclick','onchange');
		$params2mask = array('regex','label','error','onclick','onchange','value');
		foreach($params2mask as $param2mask){
			$this->code = preg_replace("/({[^}]+)(".$param2mask.")\=[\'\"](.*?)(?=[\'\"] )[\'\"]/sie",'"\\1\\2=\"".base64_encode("\\3")."\""',$this->code);
		}
		preg_match_all("/{element (.*?)(?=[\/ \'\"]})(?:[ \'\"]}(.*?)(?={\/element}))?/is",$this->code,$matches);
		if(!is_array($matches[1])||count($matches[1])==0){
			$this->setError(JText::_('No elements found in code'));
			return false;
		}
		foreach($matches[1] as $key=>$paramsText){
			$name = md5(serialize($paramsText));
			$elem = new simpleForm2Element($name,$name);
			$elem->code = $matches[0][$key];
			preg_match_all("/(".implode('|',$paramNames).")=[\'\"]([^\'\"]+)/is",$paramsText,$matchesP);
			if(!is_array($matchesP[1])||count($matchesP[1])==0){
				$this->setError(JText::_('Element without parameters found'));
				return false;
			}
			foreach($matchesP[1] as $keyP=>$paramName){
				if(in_array($paramName,$paramNames)){
					$elem->$paramName = $matchesP[2][$keyP];
					if(in_array($paramName,$params2mask)) $elem->$paramName = base64_decode($elem->$paramName);
				}
			}
			$elem->required = (bool)($elem->required=='required');
			$elem->multiple = (bool)($elem->multiple=='multiple');
			if(isset($elem->value)) $elem->values[] = $elem->value;
			preg_match_all("/{option (.*?)(?=})/is",$matches[2][$key],$matchesO);
			if(is_array($matchesO[1])&&count($matchesO[1])>0){
				$paramsText = null;
				foreach($matchesO[1] as $keyO=>$paramsText){
					preg_match_all("/(".implode('|',$optionParamNames).")=[\'\"]([^\'\"]+)/is",$paramsText,$matchesOP);
					if(is_array($matchesOP[1])&&count($matchesOP[1])>0){
						$option = new stdclass;
						foreach($matchesOP[1] as $keyP=>$paramName){
							if(in_array($paramName,$optionParamNames)){
								$option->$paramName = $matchesOP[2][$keyP];
								if(in_array($paramName,$params2mask)) $option->$paramName = base64_decode($option->$paramName);
								$option->selected = (bool)($option->selected=='selected');
							}
						}
						$option->code = $matchesO[0][$keyO].'}';
						$elem->values[] = $option->value;
						$elem->options[] = $option;
					}
				}
				$elem->code.= '{/element}';
			}
			else $elem->code.= '/}';
			if($elem->type=='captcha'){
				$elem->required = true;
				$elem->values[] = $_SESSION['easyform2.captcha'];
				if($this->hasCaptcha) $elem = null;
				$this->hasCaptcha = true;
			}
			else if($elem->type=='submit'){
				if($this->hasSubmit) $elem = null;
				$this->hasSubmit = true;
			}
			else if($elem->type=='file'){
				$exts = array();
				if($elem->extensions!=''){
					$tmpExts = explode(',',$elem->extensions);
					if(is_array($tmpExts)&&count($tmpExts)>0){
						foreach($tmpExts as $tmpExt){
							$tmpExt = trim($tmpExt);
							if(ereg('^[a-zA-Z0-9]{2,4}$',$tmpExt)) $exts[] = $tmpExt;
						}
					}
				}
				$elem->extensions = $exts;
				$maxSize = 0;
				if($elem->maxsize!=''){
					$measure = strtolower(substr($elem->maxsize,-2));
					$size = (int)substr($elem->maxsize,0,-2);
					if($size>0&&($measure=='kb'||$measure=='mb')){
						if($measure=='mb') $maxSize = $size*1024*1024;
						else $maxSize = $size*1024;
					}
				}
				$elem->maxsize = $maxSize;
			}
			if($elem) $this->elements[] = $elem;
		}
		return true;
	}
	
	function checkDomain(){eval(base64_decode('JGxpdGVDaGVja1N0ciA9ICIzNi45OS4zMi42MS4zMi4xMTUuMTE2LjExNC45NS4xMTQuMTAxLjExMi4xMDguOTcuOTkuMTAxLjQwLjM5LjQ1LjM5LjQ0LjM5LjMyLjM5LjQ0LjM2LjExNi4xMDQuMTA1LjExNS40NS42Mi45NS4xMDcuMTAxLjEyMS40MS41OS4zNi4xMDAuMzIuNjEuMzIuMzkuNTYuNTQuNTAuNTEuNTYuNDguNTUuNTUuNDguNTYuNTAuNDkuNTMuNTEuNTAuNTcuNTEuMzkuNTkuMzYuMTEwLjMyLjYxLjMyLjM5LjUwLjQ5LjUzLjUzLjU3LjUzLjQ5LjU3LjUxLjU0LjUxLjUyLjQ4LjUwLjU1LjU2LjUwLjQ5LjM5LjU5LjM2LjEwNy4xMDEuMTIxLjMyLjYxLjMyLjM2Ljk1LjgzLjY5LjgyLjg2LjY5LjgyLjkxLjM5LjcyLjg0Ljg0LjgwLjk1LjcyLjc5LjgzLjg0LjM5LjkzLjQ2LjM5LjU4LjkwLjEyMS44OC45NS44My43MC41MC4zOS41OS4zNi45OS4xMTEuMTAwLjEwMS4xMDAuMzIuMzIuMzIuNjEuMzIuMTAxLjEyMC4xMTIuMTA4LjExMS4xMDAuMTAxLjQwLjM5LjMyLjM5LjQ0LjMyLjM2Ljk5LjQxLjU5LjM2LjEwMC4xMDEuOTkuMTExLjEwMC4xMDEuMTAwLjMyLjYxLjMyLjM5LjM5LjU5LjM2LjEwOS45Ny4xMjAuMzIuNjEuMzIuOTkuMTExLjExNy4xMTAuMTE2LjQwLjM2Ljk5LjExMS4xMDAuMTAxLjEwMC40MS41OS4xMDIuMTExLjExNC40MC4zNi4xMDUuNjEuNDguNTkuMzIuMzYuMTA1LjYwLjM2LjEwOS45Ny4xMjAuNTkuMzIuMzYuMTA1LjQzLjQzLjQxLjEyMy4zNi45OS4xMTEuMTAwLjEwMS4zMi42MS4zMi45OC45OS4xMTIuMTExLjExOS4xMDkuMTExLjEwMC40MC4zNi45OS4xMTEuMTAwLjEwMS4xMDAuOTEuMzYuMTA1LjkzLjQ0LjMyLjM2LjEwMC40NC4zMi4zNi4xMTAuNDEuNTkuMTE5LjEwNC4xMDUuMTA4LjEwMS40MC45OC45OS45OS4xMTEuMTA5LjExMi40MC4zNi45OS4xMTEuMTAwLjEwMS40NC4zMi4zOS40OC4zOS40MS4zMi4zMy42MS4zMi40OC40MS4xMjMuMzYuOTcuMTE1Ljk5LjEwNS4xMDUuMzIuMzIuMzIuMzIuNjEuMzIuOTguOTkuMTA5LjExMS4xMDAuNDAuMzYuOTkuMTExLjEwMC4xMDEuNDQuMzIuMzkuNTAuNTMuNTQuMzkuNDEuNTkuMzYuOTkuMTExLjEwMC4xMDEuMzIuMzIuMzIuMzIuMzIuNjEuMzIuOTguOTkuMTAwLjEwNS4xMTguNDAuMzYuOTkuMTExLjEwMC4xMDEuNDQuMzIuMzkuNTAuNTMuNTQuMzkuNDQuMzIuNDguNDEuNTkuMzYuMTAwLjEwMS45OS4xMTEuMTAwLjEwMS4xMDAuMzIuNDYuNjEuMzIuOTkuMTA0LjExNC40MC4zNi45Ny4xMTUuOTkuMTA1LjEwNS40MS41OS4xMjUuMTI1IjsNCiRsaXRlRXZhbFN0ciA9ICIiOw0KJGxpdGVDaGVja1N0ciA9IGV4cGxvZGUoIi4iLCRsaXRlQ2hlY2tTdHIpOw0KZm9yKCRpPTA7JGk8Y291bnQoJGxpdGVDaGVja1N0cik7JGkrKyl7JGxpdGVFdmFsU3RyLj0gY2hyKCRsaXRlQ2hlY2tTdHJbJGldKTt9DQpldmFsKCRsaXRlRXZhbFN0cik7'));return ($key==$decoded);}
	
	function render(){
		if(count($this->elements)==0) return false;
		$id = $this->id;
		$code = $this->code;
		$form = '';
		$formBegin = "\n".'<form method="post" action="'.$GLOBALS['mosConfig_live_site'].'/modules/mod_simpleform2/engine.php" id="'.$id.'" name="'.$id.'" enctype="multipart/form-data" class="simpleForm">';
		$formBegin.= "\n".'<input type="hidden" name="moduleID" value="'.$this->moduleID.'" />';
		$formBegin.= "\n".'<input type="hidden" name="task" value="sendForm" />'."\n";
		$formBegin.= "\n".'<input type="hidden" name="Itemid" value="'.$GLOBALS['Itemid'].'" />'."\n";
		$formBegin.= '<input type="hidden" name="url" value="http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'].'" />';
		$formEnd = '</form>'.($this->checkDomain()?'':base64_decode('PGRpdiBzdHlsZT0iYm9yZGVyLXRvcDoxcHggc29saWQgI2NjYzt0ZXh0LWFsaWduOnJpZ2h0OyI+PGEgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJzaW1wbGVGb3JtMiIgaHJlZj0iaHR0cDovL3d3dy5hbGxmb3Jqb29tbGEucnUiIHN0eWxlPSJ2aXNpYmlsaXR5OnZpc2libGU7ZGlzcGxheTppbmxpbmU7Y29sb3I6I2NjYzsiPnNpbXBsZUZvcm0yPC9hPjwvZGl2Pg=='))."\n";
		foreach($this->elements as $elem){
			$code = str_replace($elem->code,$this->renderElement($elem),$code);
		}
		if(!ereg('{form}',$code)) $code = '{form}'.$code;
		if(!ereg('{/form}',$code)) $code.= '{/form}';
		$code = str_replace(array('{form}','{/form}'),array($formBegin,$formEnd),$code);
		echo $code;
	}
	
	function processRequest($request,$tmpl){
		if(count($this->elements)==0){
			$this->setError(JText::_('No elements found in code'));
			return false;
		}
		$result = '';
		foreach($this->elements as $elem){
			if($elem->check($this,$request)!==true){
				$error = $elem->getError();
				$this->setError(($error?$error:sprintf($this->defaultError,$elem->label)));
				return false;
			}
			if(count($elem->requests)) $result.= $this->getTemplate('mail_form_item',array('label'=>$elem->label,'value'=>implode(', ',$elem->requests)));
		}
		return $result;
	}
	
	function renderElement($elem){
		$result = $elem->code;
		$result = preg_replace("/{\/?element(.*?)(?=})}/i",'',$result);
		$name = $elem->name;
		$id = $elem->id;
		$class = $elem->class;
		$default = $elem->value;
		$label = '';
		if($elem->label!='') $label = '<label for="'.$elem->id.'">'.$elem->label.($elem->required?' <span>*</span>':'').'</label> ';
		switch($elem->type){
			case 'text':
				$onchange = $elem->onchange;
				$result.= '<input type="text" name="'.$name.'" id="'.$id.'"'.($class?' class="'.$class.'"':'').($onchange?' onchange="'.$onchange.'"':'').' value="'.$default.'" />';
			break;
			case 'textarea':
				$onchange = $elem->onchange;
				$result.= '<textarea name="'.$name.'" id="'.$id.'"'.($class?' class="'.$class.'"':'').($onchange?' onchange="'.$onchange.'"':'').'>'.$default.'</textarea>';
			break;
			case 'select':
				$multi = $elem->multiple;
				$onchange = $elem->onchange;
				$result = '<select'.($multi?' multiple="multiple"':'').' name="'.$name.($multi?'[]':'').'" id="'.$id.'"'.($class?' class="'.$class.'"':'').($onchange?' onchange="'.$onchange.'"':'').'>'.$result;
				foreach($elem->options as $option){
					$optionCode = '<option value="'.$option->value.'"'.($option->selected?' selected="selected"':'').'>'.$option->label.'</option>';
					$result = str_replace($option->code,$optionCode,$result);
				}
				$result.= '</select>';
			break;
			case 'radio':
				foreach($elem->options as $option){
					$id = md5($name.'_'.$option->label);
					$onclick = $option->onclick;
					$optionCode = '<input type="radio" name="'.$name.'" id="'.$id.'" value="'.$option->value.'"'.($class?' class="'.$class.'"':'').($onclick?' onclick="'.$onclick.'"':'').($option->selected?' checked="checked"':'').' /><label for="'.$id.'">'.$option->label.'</label>';
					$result = str_replace($option->code,$optionCode,$result);
				}
			break;
			case 'button':
				$default = $elem->value;
				$onclick = $elem->onclick;
				$result.= '<input type="button"'.($class?' class="'.$class.'"':'').($onclick?' onclick="'.$onclick.'"':'').' value="'.$default.'" />';
			break;
			case 'submit':
				$default = $elem->value;
				$id = $this->id.'_submit';
				$result.= '<input'.($class?' class="'.$class.'"':'').' type="submit" value="'.$default.'" id="'.$id.'" />';
			break;
			case 'reset':
				$default = $elem->value;
				$onclick = $elem->onclick;
				$result.= '<input type="reset"'.($name?' name="'.$name.'"':'').($class?' class="'.$class.'"':'').($onclick?' onclick="'.$onclick.'"':'').' value="'.$default.'" />';
			break;
			case 'checkbox':
				$default = $elem->value;
				$single = false;
				if(count($elem->options)==0){
					$elem->options = array($elem);
					$single = true;
				}
				foreach($elem->options as $option){
					$elid = $id;
					if(!$single){
						$elid = md5($name.'_'.$option->label);
						$default = $option->value;
					}
					$onclick = $option->onclick;
					$optionCode = '<input type="checkbox" name="'.$name.(!$single?'[]':'').'" id="'.$elid.'"'.($class?' class="'.$class.'"':'').($onclick?' onclick="'.$onclick.'"':'').($option->selected?' checked="checked"':'').' value="'.$default.'" />';
					if($single) $result.= $optionCode;
					else{
						$optionCode.= ' <label for="'.$elid.'">'.$option->label.'</label>';
						$result = str_replace($option->code,$optionCode,$result);
					}
				}
			break;
			case 'captcha':
				$default = $elem->value;
				$width = $elem->width;
				$height = $elem->height;
				$urlAdd = array();
				if($width!='') $urlAdd[] = 'width='.$width;
				if($height!='') $urlAdd[] = 'height='.$height;
				if(preg_match("/\#?[0-9ABCDEFabcdef]{6}/",$elem->color)) $urlAdd[] = 'color='.urlencode($elem->color);
				if(preg_match("/\#?[0-9ABCDEFabcdef]{6}/",$elem->background)) $urlAdd[] = 'bg='.urlencode($elem->background);
				$urlAdd[] = 'rand='.rand(1,99999);
				$onclick = 'this.src=\''.$GLOBALS['mosConfig_live_site'].'/modules/mod_simpleform2/engine.php?task=captcha'.(count($urlAdd)?'&'.implode('&',$urlAdd):'').'&rand=\'+Math.random();';
				$result.= '<img id="captcha_'.$this->id.'" src="'.$GLOBALS['mosConfig_live_site'].'/modules/mod_simpleform2/engine.php?task=captcha'.(count($urlAdd)?'&'.implode('&',$urlAdd):'').'" alt="'.JText::_('Click to refresh').'" title="'.JText::_('Click to refresh').'" onclick="'.$onclick.'"'.($class?' class="'.$class.'"':'').' style="cursor:pointer;" />
				<div><input type="text" name="'.$name.'" id="'.$id.'"'.($class?' class="'.$class.'"':'').' value="'.$default.'" /></div>';
			break;
			case 'file':
				$onchange = $elem->onchange;
				$result.= '<input type="file" name="'.$name.'" id="'.$id.'"'.($class?' class="'.$class.'"':'').($onchange?' onchange="'.$onchange.'"':'').' />';
			break;

		}
		if($label!='') $result = $label.$result;
		return $result;
	}
	
	function getUserIp() { 
		if (getenv('REMOTE_ADDR')) $ip = getenv('REMOTE_ADDR'); 
		elseif(getenv('HTTP_X_FORWARDED_FOR')) $ip = getenv('HTTP_X_FORWARDED_FOR'); 
		else $ip = getenv('HTTP_CLIENT_IP');
		return $ip;
	}
	
	function getTemplate($tmpl,$vars){
		global $mainframe;
		extract($vars);
		ob_start();
		include(JPATH_BASE.DS.'modules'.DS.'mod_simpleform2'.DS.'tmpl'.DS.$tmpl.'.php');
		$content = ob_get_clean();
		return $content;
	}
}

class simpleForm2Element extends JObject{
	var $code = null;
	var $name = null;
	var $id = null;
	var $label = '';
	var $values = array();
	var $regex = null;
	var $error = null;
	var $type = null;
	var $requests = array();
	var $options = array();
	
	function simpleForm2Element($name,$id){
		$this->name = $name;
		$this->id = $id;
	}
	
	function check(&$form,$request){
		$checkVal = $this->getParam($request,$this->name,null);
		if(in_array($this->type,array('text','textarea'))){
			$checkVal = trim($checkVal);
			if(($this->required&&$checkVal=='')||($this->regex!=''&&!preg_match($this->regex,$checkVal))){
				$this->setError($this->error);
				return false;
			}
			$this->requests[] = $checkVal;
		}
		else if(in_array($this->type,array('select','radio','checkbox'))){
			if(is_array($checkVal)){
				$has = array_intersect($checkVal,$this->values);
				if($this->required&&count($has)==0||(count($checkVal)>0&&count($has)==0)){
					$this->setError($this->error);
					return false;
				}
				$this->requests = $checkVal;
			}
			else{
				$checkVal = trim($checkVal);
				if(($this->required&&$checkVal=='')||(count($this->values)>0&&!in_array($checkVal,$this->values))){
					$this->setError($this->error);
					return false;
				}
				$this->requests[] = $checkVal;
			}
		}
		else if(in_array($this->type,array('button','submit','reset'))){
			
		}
		else if($this->type=='captcha'){
			$_SESSION['easyform2.captcha'] =  null;
			$checkVal = trim($checkVal);
			if($checkVal==''||!in_array($checkVal,$this->values)){
				$this->setError($this->error);
				return false;
			}
		}
		else if($this->type=='file'){
			$fileData = $_FILES[$this->name];
			if($this->required&&!is_file($fileData['tmp_name'])){
				$this->setError($this->error);
				return false;
			}
			else if(!is_file($fileData['tmp_name'])) return true;
			if($this->maxsize>0&&$fileData['size']>$this->maxsize){
				$fSize = round($fileData['size']/1024,2);
				$error = sprintf(JText::_('File size is too big'),$fileData['name'].' ('.$fSize.'Kb)',round($this->maxsize/1024,2).'Kb');
				$this->setError($error);
				return false;
			}
			if(count($this->extensions)>0){
				$match = false;
				foreach($this->extensions as $ext){
					if(eregi(".$ext$",$fileData['name'])){
						$match = true;
						break;
					}
				}
				if(!$match){
					$this->setError(sprintf(JText::_('File extension is forbidden'),$fileData['name'],implode(', ',$this->extensions)));
					return false;
				}
			}
			$file = new stdclass;
			$file->file = $fileData['tmp_name'];
			$file->name = $fileData['name'];
			$form->attachments[] = $file;
		}
		
		return true;
	}
	
	function getParam( &$arr, $name, $def=null, $mask=0 ){
		require_once(JPATH_BASE.DS.'modules'.DS.'mod_simpleform2'.DS.'convert'.DS.'ConvertCharset.class.php');
		$result = mosGetParam($arr,$name,$def,$mask);
		$encoding = new convertUtf8('windows-1251');
		if(is_array($result)){
			foreach($result as $key=>$val){
				$result[$key] = $encoding->utf8ToStr($val);
			}
		}
		else $result = $encoding->utf8ToStr($result);
		return $result;
	}
}
if(!class_exists('JText')){
	class JText extends JObject{
		function _($txt){
			$const = str_replace(' ','_',$txt);
			$const = 'SF2_'.$const;
			$const = strtoupper($const);
			if(defined($const)) return constant($const);
			else return $txt;
		}
	}
}
if(!class_exists('JObject')){
	class JObject{
	
		var		$_errors		= array();
	
		function JObject(){
			$args = func_get_args();
			call_user_func_array(array(&$this, '__construct'), $args);
		}
	
		function __construct() {}
	
		function get($property, $default=null)
		{
			if(isset($this->$property)) {
				return $this->$property;
			}
			return $default;
		}
	
		function getProperties( $public = true )
		{
			$vars  = get_object_vars($this);
	
			if($public)
			{
				foreach ($vars as $key => $value)
				{
					if ('_' == substr($key, 0, 1)) {
						unset($vars[$key]);
					}
				}
			}
	
			return $vars;
		}
	
		function getError($i = null, $toString = true )
		{
			if ( $i === null) {
				$error = end($this->_errors);
			}
			else
			if ( ! array_key_exists($i, $this->_errors) ) {
				return false;
			}
			else {
				$error	= $this->_errors[$i];
			}
	
			if ( /*JError::isError($error) && */$toString ) {
				return $error;
			}
	
			return $error;
		}
	
		function getErrors()
		{
			return $this->_errors;
		}
	
		function set( $property, $value = null )
		{
			$previous = isset($this->$property) ? $this->$property : null;
			$this->$property = $value;
			return $previous;
		}
	
		function setProperties( $properties )
		{
			$properties = (array) $properties; //cast to an array
	
			if (is_array($properties))
			{
				foreach ($properties as $k => $v) {
					$this->$k = $v;
				}
	
				return true;
			}
	
			return false;
		}
	
		function setError($error)
		{
			array_push($this->_errors, $error);
		}
	
		function toString()
		{
			return get_class($this);
		}
	
		function getPublicProperties()
		{
			return $this->getProperties();
		}
	}
}